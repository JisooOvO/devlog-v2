generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roleId        String?
  role          Role?     @relation(fields: [roleId], references: [id])
  posts         Post[]
  likes         Likes[]
  accounts      Account[]
  sessions      Session[]
  comment       Comment[]
}

model Role {
  id        String    @id @default(cuid())
  name      String    @unique
  User      User[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@index([name])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String     @id @default(cuid())
  thumbnailId String?
  thumbnail   Thumbnail? @relation(fields: [thumbnailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String     @unique
  description String
  content     String
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  published   Boolean    @default(false)
  topicId     String?
  topic       Topic?     @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seriesId    String?
  series      Series?    @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes       Likes[]
  comment     Comment[]
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @default(now()) @map(name: "updated_at")
  deletedAt   DateTime?  @map(name: "deleted_at")

  @@index([id])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@index([postId])
}

model Likes {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([postId, userId])
}

model Thumbnail {
  id        String    @id @default(cuid())
  name      String
  path      String    @unique
  posts     Post[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@index([path])
}

model Topic {
  id        String    @id @default(cuid())
  name      String    @unique
  posts     Post[]
  series    Series[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@index([name])
}

model Series {
  id        String    @id @default(cuid())
  name      String    @unique
  topicId   String
  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  posts     Post[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@index([name])
}
