generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String     @id @default(cuid())
  thumbnailId String?    @unique
  thumbnail   Thumbnail? @relation(fields: [thumbnailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  description String
  title       String     @unique
  content     String
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  published   Boolean    @default(false)
  thesisId    String
  thesis      Thesis     @relation(fields: [thesisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topicId     String
  topic       Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes       Int        @default(0)
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @default(now()) @map(name: "updated_at")
  deletedAt   DateTime?  @map(name: "deleted_at")
}

model Thumbnail {
  id        String    @id @default(cuid())
  name      String
  path      String
  posts     Post[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model Thesis {
  id        String    @id @default(cuid())
  name      String
  posts     Post[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model Topic {
  id        String    @id @default(cuid())
  name      String
  posts     Post[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}
